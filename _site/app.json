[{"name":"app.R","content":"suppressPackageStartupMessages({\n\tlibrary(bslib)\n\tlibrary(dplyr)\n\tlibrary(fable)\n\tlibrary(feasts)\n\tlibrary(ggplot2)\n\tlibrary(gt)\n\tlibrary(htmltools)\n\tlibrary(lubridate)\n\tlibrary(purrr)\n\tlibrary(readr)\n\tlibrary(scales)\n\tlibrary(stringr)\n\tlibrary(tsibble)\n\tlibrary(shiny)\n})\n\n\n\nget_date_col <- function(data) {\n\t\n\tdate_col_name_i <- data |> \n\t\tsapply(class) |> \n\t\tsapply(first) |> \n\t\tstr_which(\"(Date|POSIXct)\")\n\t\n\tdata |> names() |> pluck(date_col_name_i, 1)\n\t\n}\n\n\n\n# Define UI for application that draws a histogram -----------------------------\nui <- page_fixed(\n\t\n\t## Application title ----\n\tcard(\n\t\th1(\"Forecast future crime frequency\"),\n\t\tmarkdown(\n\t\t\t\"This app forecasts how many crimes are likely to happen in an area in the \n\t\t\tnear future, based on how many crimes occurred there in the recent past. \n\t\t\tThe forecasts are created using an ensemble forecasting model that \n\t\t\t[Ashby (2023)](https://doi.org/10.21428/cb6ab371.8c79f146) found to be \n\t\t\tmost accurate for forecasting crime.\n\t\t\t\n\t\t\t**Due to limitations in the underlying technology, this app currently \n\t\t\tworks only in Google Chrome.**\n\t\t\t\n\t\t\tUpload your crime data to produce forecasts. Forecasts are produced \n\t\t\tdirectly in your web browser â€“ no data is transferred or stored outside \n\t\t\tyour own computer.\"\n\t\t)\n\t),\n\t\n\t## Input and output columns ----\n\tlayout_columns(\n\t\tcard(\n\t\t\tp(strong(\"Step 1: upload crime data\")),\n\t\t\tmarkdown(\n\t\t\t\t\"Upload a single CSV file of data in which each row represents a single \n\t\t\t\tcrime. The file should contain **one** column that shows the date on \n\t\t\t\twhich each crime occurred.\"\n\t\t\t),\n\t\t\tfileInput(\n\t\t\t\tinputId = \"datafile\",\n\t\t\t\tlabel = NULL,\n\t\t\t\t# label = \"Upload a CSV file of crime data\",\n\t\t\t\taccept = \".csv\"\n\t\t\t),\n\t\t\tp(strong(\"Step 2: choose type of forecasts\")),\n\t\t\tradioButtons(\n\t\t\t\tinputId = \"periodtype\",\n\t\t\t\tlabel = NULL,\n\t\t\t\tchoices = c(\n\t\t\t\t\t\"daily forecasts\" = \"day\",\n\t\t\t\t\t\"weekly forecasts\" = \"week\", \n\t\t\t\t\t\"monthly forecasts\" = \"month\"\n\t\t\t\t)\n\t\t\t\t# selected = character(0)\n\t\t\t),\n\t\t\tp(strong(\"Step 3: choose number of forecasts\")),\n\t\t\tp(\n\t\t\t\t\"Choose the number of days/weeks/months into the future to forecast. \n\t\t\t\tForecasts will begin from the next period after the last period in the \n\t\t\t\tdata you provide.\"\n\t\t\t),\n\t\t\tnumericInput(\n\t\t\t\tinputId = \"periods\",\n\t\t\t\tlabel = NULL,\n\t\t\t\t# label = \"Number of periods into the future to forecast\",\n\t\t\t\tvalue = 7,\n\t\t\t\tmin = 0,\n\t\t\t\tstep = 1\n\t\t\t),\n\t\t\tp(strong(\"Step 4: generate forecasts\")),\n\t\t\tactionButton(\"submit\", \"Generate forecasts\", icon = icon(\"chart-simple\"))\n\t\t),\n\t\tcard(\n\t\t\taccordion(\n\t\t\t\taccordion_panel(\n\t\t\t\t\t\"Check forecast accuracy\",\n\t\t\t\t\tshinycssloaders::withSpinner(htmlOutput(\"data_check_text\")),\n\t\t\t\t\ticon = icon(\"circle-question\")\n\t\t\t\t),\n\t\t\t\taccordion_panel(\n\t\t\t\t\t\"View forecasts\",\n\t\t\t\t\ttextOutput(\"forecast_period\"),\n\t\t\t\t\tshinycssloaders::withSpinner(plotOutput(\"plot\")),\n\t\t\t\t\ticon = icon(\"chart-simple\")\n\t\t\t\t),\n\t\t\t\taccordion_panel(\n\t\t\t\t\t\"Download forecasts\",\n\t\t\t\t\thtmlOutput(\"download_text\"),\n\t\t\t\t\tgt_output(\"forecast_table\"),\n\t\t\t\t\tdownloadButton(\"downloadforecast\", label = \"Download forecasts\"),\n\t\t\t\t\ticon = icon(\"download\")\n\t\t\t\t),\n\t\t\t\tmultiple = FALSE\n\t\t\t)\n\t\t),\n\t\tcol_widths = c(5, 7),\n\t\tfillable = TRUE\n\t)\n\t\n)\n\n\n\n\n\n# Define server logic required to draw a histogram -----------------------------\nserver <- function(input, output) {\n\t\n\t\n\t\n\t## Count events ----\t\n\tcounts <- reactive({\n\t\t\n\t\t# Check file extension\n\t\tif (tools::file_ext(input$datafile$name) == \"csv\") {\n\t\t\tfile_data <- read_csv(input$datafile$datapath, show_col_types = FALSE)\n\t\t} else {\n\t\t\tvalidate(\"Uploaded file is not a CSV file. Please upload a file with a `.csv` file extension\")\n\t\t}\n\n\t\tcolumn_types <- sapply(sapply(file_data, class), first)\n\n\t\tif (sum(column_types %in% c(\"Date\", \"POSIXct\")) > 1) {\n\t\t\tvalidate(\"The data file contains more than one column of dates. Please upload a file containing one column of dates.\")\n\t\t} else if (sum(column_types %in% c(\"Date\", \"POSIXct\")) == 0) {\n\t\t\tvalidate(\"The data file does not contain a column of dates. Please upload a file containing one column of dates.\")\n\t\t}\n\n\t\tdate_col <- get_date_col(file_data)\n\t\tfile_data <- rename(file_data, date_use = {{date_col}})\n\n\t\tif (input$periodtype == \"week\") {\n\t\t\tfile_data <- mutate(file_data, date_use = yearweek(date_use))\n\t\t} else if (input$periodtype == \"month\") {\n\t\t\tfile_data <- mutate(file_data, date_use = yearmonth(date_use))\n\t\t} else {\n\t\t\tfile_data <- mutate(file_data, date_use = as_date(date_use))\n\t\t}\n\t\t\n\t\tfile_data |> \n\t\t\tcount(date = date_use, name = \"events\") |> \n\t\t\tas_tsibble(index = date) |> \n\t\t\tfill_gaps(events = 0)\n\t\t\n\t}) |> \n\t\tbindEvent(input$submit)\n\t\n\t\n\t\n\t## Convert period name another format ----\n\tperiod_name <- reactive(case_match(\n\t\tinput$periodtype, \n\t\t\"day\" ~ \"daily\", \n\t\t\"week\" ~ \"weekly\", \n\t\t\"month\" ~ \"monthly\"\n\t)) |> \n\t\tbindEvent(input$submit)\n\t\n\t\n\t\n\t## Model frequency ----\n\tmodels <- reactive({\n\t\t\n\t\tmodel(\n\t\t\tcounts(),\n\t\t\tforecast = combination_model(\n\t\t\t\tETS(events ~ trend() + season()),\n\t\t\t\tTSLM(events ~ trend() + season()),\n\t\t\t\tdecomposition_model(STL(events ~ trend() + season()), ETS(season_adjust))\n\t\t\t)\n\t\t\t# forecast = combination_model(\n\t\t\t# \tSNAIVE(events ~ lag()),\n\t\t\t# ETS(events ~ trend() + season()),\n\t\t\t# TSLM(events ~ trend() + season()),\n\t\t\t# decomposition_model(STL(events ~ trend() + season()), ETS(season_adjust))\n\t\t\t# )\n\t\t)\n\t\t\n\t}) |> \n\t\tbindEvent(input$submit)\n\t\n\t\n\t\n\t## Forecast events ----\n\tforecasts <- reactive({\n\t\t\n\t\tmodels() |>\n\t\t\tforecast(h = input$periods) |>\n\t\t\tas_tibble() |>\n\t\t\tselect(date, forecast = .mean)\n\t\t\n\t}) |> \n\t\tbindEvent(input$submit)\n\t\n\t\n\t\n\t## Format text to check forecast accuracy ----\n\toutput$data_check_text <- renderText({\n\t\t\n\t\tevent_counts <- counts()\n\t\tfirst_date <- first(event_counts$date)\n\t\tlast_date <- last(event_counts$date)\n\t\t\n\t\t\n\t\t### Format text of start/finish dates string ----\n\t\t\n\t\tif (input$periodtype == \"week\") {\n\t\t\tdate_start <- format(first_date, \"%Y, Week %U\")\n\t\t\tdate_end <- format(last_date, \"%Y, Week %U\")\n\t\t} else if (input$periodtype == \"month\") {\n\t\t\tdate_start <- format(first_date, \"%B %Y\")\n\t\t\tdate_end <- format(last_date, \"%B %Y\")\n\t\t} else {\n\t\t\tdate_start <- format(first_date, \"%e %B %Y\")\n\t\t\tdate_end <- format(last_date, \"%e %B %Y\")\n\t\t}\n\t\t\n\t\tmean_events <- event_counts |> \n\t\t\tsummarise(mean_events = mean(events, na.rm = TRUE)) |> \n\t\t\tpluck(\"mean_events\", 1) |> \n\t\t\tround()\n\t\t\n\t\ttext1 <- str_glue(\n\t\t\t\"<p>Original data: {scales::comma(nrow(event_counts))} periods of \",\n\t\t\t\"{period_name()} data from {date_start} to {date_end} with an average \",\n\t\t\t\"of {mean_events} events per {input$periodtype}.<\/p>\"\n\t\t)\n\t\t\n\t\t\n\t\t### Check input data ----\n\t\t\n\t\tdata_rows <- nrow(event_counts)\n\t\t\n\t\tmean_events <- event_counts |> \n\t\t\tsummarise(mean_events = mean(events, na.rm = TRUE)) |> \n\t\t\tpluck(\"mean_events\", 1) |> \n\t\t\tround()\n\t\t\n\t\tif (input$periodtype == \"day\") {\n\t\t\tnext_period <- str_glue(\n\t\t\t\t\"The forecasts may be more accurate if you produced weekly forecasts \",\n\t\t\t\t\"instead.\"\n\t\t\t)\n\t\t} else if (input$periodtype == \"week\") {\n\t\t\tnext_period <- str_glue(\n\t\t\t\t\"The forecasts may be more accurate if you produced monthly forecasts \",\n\t\t\t\t\"instead.\"\n\t\t\t)\n\t\t} else {\n\t\t\tnext_period <- \"\"\n\t\t}\n\t\t\n\t\tif (data_rows < 20) {\n\t\t\ttext2 <- str_glue(\n\t\t\t\t'<p><i class=\"fa-solid fa-hand\" style=\"color: #CC0000;\"><\/i> \n\t\t\t\t<strong style=\"color: #CC0000;\">Only {input$periodtype}s of data have \n\t\t\t\tbeen provided<\/strong>. Forecasts are likely to be more accurate if \n\t\t\t\thistorical data are available for 20 or more {input$periodtype}s.<\/p>'\n\t\t\t)\n\t\t} else if (mean_events < 5) {\n\t\t\ttext2 <- str_glue(\n\t\t\t\t'<p><i class=\"fa-solid fa-hand\" style=\"color: #CC0000;\"><\/i> \n\t\t\t\t<strong style=\"color: #CC0000;\">Forecasts of rare events are likely to \n\t\t\t\tbe unreliable<\/strong>. The data you have uploaded include an average of \n\t\t\t\t{mean_events} events per {input$periodtype}. All else being equal, \n\t\t\t\tforecasting becomes more difficult when there are very few events in \n\t\t\t\teach period. {next_period}<\/p>'\n\t\t\t)\n\t\t} else {\n\t\t\ttext2 <- str_glue(\n\t\t\t\t'<p><i class=\"fa-solid fa-thumbs-up\"><\/i> In general, the more data that \n\t\t\t\tis provided the more accurate the resulting forecasts will be, with at \n\t\t\t\tleast 20 {input$periodtype}s of data required for reasonably accurate \n\t\t\t\tforecasting.<\/p>'\n\t\t\t)\n\t\t}\n\t\t\n\t\t\n\t\t### Check forecasts ----\n\t\t\n\t\tforecast_rows <- nrow(forecasts())\n\t\tmape <- models() |> accuracy() |> pluck(\"MAPE\", 1)\n\t\t\n\t\tif (input$periodtype == \"day\" & forecast_rows > 365) {\n\t\t\ttext3 <- str_glue(\n\t\t\t\t'<p><i class=\"fa-solid fa-hand\" style=\"color: #CC0000;\"><\/i> \n\t\t\t\t<strong style=\"color: #CC0000;\">Forecasting {comma(forecast_rows)} days \n\t\t\t\tinto the future will be less accurate<\/strong>. The further into the \n\t\t\t\tfuture you attempt to forecast, the less accurate the forecasts will be \n\t\t\t\tbecause the processes underlying any patterns of crime may change in the \n\t\t\t\tmeantime. Producing daily forecasts more than 365 days into the future \n\t\t\t\tis not advised.<\/p>'\n\t\t\t)\n\t\t} else if (input$periodtype == \"week\" & forecast_rows > 52) {\n\t\t\ttext3 <- str_glue(\n\t\t\t\t'<p><i class=\"fa-solid fa-hand\" style=\"color: #CC0000;\"><\/i> \n\t\t\t\t<strong style=\"color: #CC0000;\">Forecasting {comma(forecast_rows)} weeks \n\t\t\t\tinto the future will be less accurate<\/strong>. The further into the \n\t\t\t\tfuture you attempt to forecast, the less accurate the forecasts will be \n\t\t\t\tbecause the processes underlying any patterns of crime may change in the \n\t\t\t\tmeantime. Producing weekly forecasts more than 52 weeks into the future \n\t\t\t\tis not advised.<\/p>'\n\t\t\t)\n\t\t} else if (input$periodtype == \"month\" & forecast_rows > 24) {\n\t\t\ttext3 <- str_glue(\n\t\t\t\t'<p><i class=\"fa-solid fa-hand\" style=\"color: #CC0000;\"><\/i> \n\t\t\t\t<strong style=\"color: #CC0000;\">Forecasting {comma(forecast_rows)} \n\t\t\t\tmonths into the future will be less accurate<\/strong>. The further into \n\t\t\t\tthe future you attempt to forecast, the less accurate the forecasts will \n\t\t\t\tbe because the processes underlying any patterns of crime may change in \n\t\t\t\tthe meantime. Producing monthly forecasts more than 24 months into the \n\t\t\t\tfuture is not advised.<\/p>'\n\t\t\t)\n\t\t} else if (data_rows < forecast_rows) {\n\t\t\ttext3 <- str_glue(\n\t\t\t\t'<p><i class=\"fa-solid fa-hand\" style=\"color: #CC0000;\"><\/i> \n\t\t\t\t<strong style=\"color: #CC0000;\">Forecasting {comma(forecast_rows)} \n\t\t\t\t{input$periodtype}s into the future based on only {comma(data_rows)} \n\t\t\t\t{input$periodtype}s of data is likely to produce inaccurate \n\t\t\t\tforecasts<\/strong>. Provide data for a longer period or generate \n\t\t\t\tforecasts for a shorter period.<\/p>'\n\t\t\t)\n\t\t} else if (mape > 10) {\n\t\t\ttext3 <- str_glue(\n\t\t\t\t'<p><i class=\"fa-solid fa-hand\" style=\"color: #CC0000;\"><\/i> \n\t\t\t\t<strong style=\"color: #CC0000;\">Generated forecasts are likely to be\n\t\t\t\tinaccurate<\/strong>. The app has identified patterns in the data \n\t\t\t\tprovided, but those patterns are unlikely to be consistent enough for \n\t\t\t\treliable forecasting, with differences between forecasts and actual \n\t\t\t\tcrime counts of about {percent(mape, scale = 1)}. It may be possible to \n\t\t\t\tproduce more-accurate forecasts manually.<\/p>'\n\t\t\t)\n\t\t} else {\n\t\t\ttext3 <- str_glue(\n\t\t\t\t'<p><i class=\"fa-solid fa-thumbs-up\"><\/i> Forecasts for \n\t\t\t\t{comma(forecast_rows)} {input$periodtype}s into the future are likely to \n\t\t\t\tbe reasonably accurate based on the data provided.<\/p>'\n\t\t\t)\n\t\t}\n\t\t\n    ### Combine text ----\t\t\n\t\tstr_glue(\"{text1}{text2}{text3}\")\n\t\t\n\t}) |> \n\t\tbindEvent(input$submit)\n\t\n\t\n\t\n\t## Format text of forecast-period string ----\n\toutput$forecast_period <- renderText({\n\t\t\n\t\treq(input$periodtype)\n\t\t\n\t\tif (input$periodtype == \"week\") {\n\t\t\tdate_start <- format(first(forecasts()$date), \"%Y, Week %U\")\n\t\t\tdate_end <- format(last(forecasts()$date), \"%Y, Week %U\")\n\t\t} else if (input$periodtype == \"month\") {\n\t\t\tdate_start <- format(first(forecasts()$date), \"%B %Y\")\n\t\t\tdate_end <- format(last(forecasts()$date), \"%B %Y\")\n\t\t} else {\n\t\t\tdate_start <- format(first(forecasts()$date), \"%e %B %Y\")\n\t\t\tdate_end <- format(last(forecasts()$date), \"%e %B %Y\")\n\t\t}\n\t\t\n\t\tstr_glue(\n\t\t\t\"Forecasts: {scales::comma(nrow(forecasts()))} {period_name()} \",\n\t\t\t\"forecasts from {date_start} to {date_end}.\"\n\t\t)\n\t\t\n\t}) |> \n\t\tbindEvent(input$submit)\n\t\n\t\n\t\n\t## Produce output plot ----\n\toutput$plot <- renderPlot({\n\t\t\n\t\tevent_counts <- counts() |> \n\t\t\tmutate(date = as_date(date))\n\t\t\n\t\tevent_forecasts <- forecasts() |> \n\t\t\tmutate(date = as_date(date))\n\t\t\n\t\tforecast_plus <- counts() |>\n\t\t\ttail(1) |>\n\t\t\tselect(date, forecast = events) |> \n\t\t\tmutate(date = as_date(date)) |>\n\t\t\tbind_rows(event_forecasts)\n\t\t\n\t\tprev_events_to_show <- min(7, nrow(forecast_plus) - 1, nrow(event_counts))\n\t\t\n\t\tggplot() +\n\t\t\tgeom_line(\n\t\t\t\taes(x = date, y = events, linetype = \"A\"), \n\t\t\t\tdata = tail(event_counts, n = prev_events_to_show)\n\t\t\t) +\n\t\t\tgeom_line(\n\t\t\t\taes(x = date, y = forecast, linetype = \"B\"), \n\t\t\t\tdata = forecast_plus\n\t\t\t) +\n\t\t\tgeom_point(\n\t\t\t\taes(x = date, y = events), \n\t\t\t\ttail(event_counts, prev_events_to_show)\n\t\t\t) +\n\t\t\tgeom_point(aes(x = date, y = forecast), data = event_forecasts) +\n\t\t\tscale_x_date(expand = expansion(mult = 0.02)) +\n\t\t\tscale_y_continuous(expand = expansion(mult = 0.25)) +\n\t\t\tscale_linetype_manual(\n\t\t\t\tvalues = c(\"A\" = \"solid\", \"B\" = \"12\"),\n\t\t\t\tlabels = c(\"A\" = \"past events\", \"B\" = \"forecasts\")\n\t\t\t) +\n\t\t\tlabs(\n\t\t\t\tcaption = str_glue(\n\t\t\t\t\t\"Note: {prev_events_to_show} most recent past event counts are \",\n\t\t\t\t\t\"shown for comparison with forecasts\"\n\t\t\t\t),\n\t\t\t\tx = NULL, \n\t\t\t\ty = \"number of crimes\",\n\t\t\t\tlinetype = NULL\n\t\t\t) +\n\t\t\ttheme_minimal() +\n\t\t\ttheme(\n\t\t\t\tlegend.position = \"bottom\",\n\t\t\t\tplot.caption = element_text(hjust = 0),\n\t\t\t\tplot.caption.position = \"plot\"\n\t\t\t)\n\t\t\n\t}) |> \n\t\tbindEvent(input$submit)\n\t\n\t\n\t\n\t## Produce text for download box ----\n\toutput$download_text <- renderText({\n\t\t\n\t\tdownload_text <- str_glue(\n\t\t\t\"<p>The first 10 forecasts are shown below. To download all forecasts \",\n\t\t\t\"as a CSV file, click 'Download forecasts' below.<\/p>\"\n\t\t)\n\t\t\n\t\tif (input$periodtype %in% c(\"week\", \"month\")) {\n\t\t\tstr_glue(\n\t\t\t\t\"{download_text}<p>Note: for {period_name()} forecasts, the dates \",\n\t\t\t\t\"shown in the table and downloaded CSV file are the first day of the \",\n\t\t\t\t\"{input$periodtype}<\/p>\"\n\t\t\t)\n\t\t} else {\n\t\t\tdownload_text\n\t\t}\n\t\t\n\t}) |> \n\t\tbindEvent(input$submit)\n\t\n\t\n\t\n\t## Produce table for download box ----\n\toutput$forecast_table <- render_gt({\n\t\t\n\t\tforecast_table <- forecasts() |> \n\t\t\tslice(1:10) |> \n\t\t\tmutate(\n\t\t\t\tdate = format(date, \"%Y-%m-%d\"),\n\t\t\t\tforecast = as.integer(round(forecast))\n\t\t\t) |> \n\t\t\tgt() |> \n\t\t\tcols_align(\"left\", columns = date)\n\t\t\n\t}) |> \n\t\tbindEvent(input$submit)\n\t\n\t\n\t\n}\n\n# Run the application ----------------------------------------------------------\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"LICENSE","content":"MIT License\n\nCopyright (c) 2024 Matt Ashby\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","type":"text"},{"name":"README.md","content":"# Forecast Crime\n\nThis project provides an interactive web app for forecasting the future frequency of crime based on previous crime counts, using the methods outlined in [Ashby (2023)](https://doi.org/10.21428/cb6ab371.8c79f146). The app is available at https://lesscrime.info/forecast-crime/\n","type":"text"},{"name":"forecast-crime.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: No\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"}]
